USE mysql_test_db;

-- 1
SELECT COUNT(STUDENT_NO) AS 학생수
FROM TB_STUDENT
WHERE YEAR(ENTRANCE_DATE) = 2001
AND DEPARTMENT_NO = (
	SELECT DEPARTMENT_NO
	FROM TB_DEPARTMENT
	WHERE DEPARTMENT_NAME = '사학과'
);

-- 2
SELECT CATEGORY AS 계열, DEPARTMENT_NAME AS 학과이름, CAPACITY AS 정원 
FROM TB_DEPARTMENT
WHERE CATEGORY = '공학' AND CAPACITY BETWEEN 20 AND 30
ORDER BY 2 ASC;

-- 3
SELECT CATEGORY AS 계열, COUNT(DEPARTMENT_NO) AS 학과수 
FROM TB_DEPARTMENT
GROUP BY CATEGORY
HAVING CATEGORY LIKE '%학'
ORDER BY 2 DESC;

-- 4
SELECT  PROFESSOR_NAME AS 교수이름, SUBSTR(PROFESSOR_SSN, 1, 2) AS 출생년도, PROFESSOR_ADDRESS AS 주소
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO = (
	SELECT DEPARTMENT_NO
	FROM TB_DEPARTMENT
	WHERE DEPARTMENT_NAME = '영어영문학과'
)
ORDER BY 2;

-- 5
SELECT DEPARTMENT_NO AS 학과번호, STUDENT_NAME AS 학생이름, IF(ABSENCE_YN = 'Y', '휴학', '정상')
FROM TB_STUDENT
WHERE DEPARTMENT_NO = (
	SELECT DEPARTMENT_NO
	FROM TB_DEPARTMENT
	WHERE DEPARTMENT_NAME = '국어국문학과'
) AND STUDENT_ADDRESS LIKE '서울%';

-- 6
SELECT CONCAT(SUBSTR(STUDENT_SSN, 1, 8), "******") AS '[주민번호]', STUDENT_NAME AS 학생이름 
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_SSN, 1, 2) = '80'
	AND SUBSTR(STUDENT_SSN, 8, 1) = '2'
	AND STUDENT_NAME LIKE '김%'
ORDER BY 2;

-- 7
SELECT DEPARTMENT_NAME AS 학과이름, CAPACITY AS 정원, IF(CAPACITY >= 40, '대강의실', IF(CAPACITY >= 30, '중강의실', '소강의실')) AS 강의실크기
FROM TB_DEPARTMENT
WHERE CATEGORY = '예체능'
ORDER BY CAPACITY DESC;

-- 8
SELECT STUDENT_NAME AS 학생이, DATE_FORMAT(ENTRANCE_DATE, '%y년 %m월 %d일') AS 입학일, TRUNCATE(DATEDIFF(NOW(), ENTRANCE_DATE) / 365, 0) AS 입학후기간
FROM TB_STUDENT
WHERE YEAR(ENTRANCE_DATE) < 2000
ORDER BY 2;

-- 9
SELECT DEPARTMENT_NO, PROFESSOR_ADDRESS, PROFESSOR_SSN, YEAR(NOW()) - (1900 + CAST(MAX(SUBSTR(PROFESSOR_SSN, 1, 2)) AS INTEGER))
FROM TB_PROFESSOR prf
GROUP BY DEPARTMENT_NO
HAVING PROFESSOR_ADDRESS LIKE '서울%'
ORDER BY 4;

-- -- 이상하게 아래로 질의하면 안된다
SELECT DEPARTMENT_NO AS 학과번호, YEAR(NOW()) - (1900 + CAST(MAX(SUBSTR(PROFESSOR_SSN, 1, 2)) AS INTEGER)) AS 나이
FROM TB_PROFESSOR
GROUP BY DEPARTMENT_NO
HAVING PROFESSOR_ADDRESS LIKE '서울%';

-- -- 아래처럼 질의하니까 나왔다
SELECT 학과번호, 나이
FROM (
	SELECT DEPARTMENT_NO AS 학과번호, PROFESSOR_ADDRESS AS 주소, YEAR(NOW()) - (1900 + CAST(MAX(SUBSTR(PROFESSOR_SSN, 1, 2)) AS INTEGER)) AS 나이
	FROM TB_PROFESSOR
	GROUP BY DEPARTMENT_NO
	HAVING PROFESSOR_ADDRESS LIKE '서울%'
) t
ORDER BY 나이;

-- 10
SELECT DEPARTMENT_NO AS 학과번호, STUDENT_NAME AS 학생이름, COACH_PROFESSOR_NO AS 지도교수번호, CONCAT(YEAR(ENTRANCE_DATE), '년')  AS 입학년도
FROM TB_STUDENT
WHERE ENTRANCE_DATE BETWEEN '2005-1-1' AND '2006-12-31'
	AND SUBSTR(STUDENT_SSN, 8, 1) = 1
	AND STUDENT_ADDRESS IS NULL
ORDER BY 4, 2;

-- 11
-- -- 분자생물학과가 존재하지 않아서 생물학과로 질의하였음

SELECT PROFESSOR_NAME AS 교수이름, PROFESSOR_ADDRESS AS 주소
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IN (
	SELECT DEPARTMENT_NO
	FROM TB_DEPARTMENT
	WHERE CATEGORY = (
		SELECT CATEGORY
		FROM TB_DEPARTMENT
		WHERE DEPARTMENT_NAME = '생물학과'
	)
)
ORDER BY PROFESSOR_NAME;

-- 12
SELECT d.DEPARTMENT_NAME AS 학과이름, s.STUDENT_NAME AS 학생이름, p.PROFESSOR_NAME AS 지도교수이름
FROM TB_DEPARTMENT d
	INNER JOIN TB_STUDENT s 
	ON d.DEPARTMENT_NO = s.DEPARTMENT_NO
	INNER JOIN TB_PROFESSOR p
	ON s.COACH_PROFESSOR_NO = p.PROFESSOR_NO
WHERE s.DEPARTMENT_NO = (
	SELECT DEPARTMENT_NO
	FROM TB_DEPARTMENT
	WHERE DEPARTMENT_NAME = '국어국문학과'
)
ORDER BY 학생이름;

-- 13
SELECT *
FROM (
	SELECT d.CATEGORY AS 계열, d.DEPARTMENT_NAME AS 학과이름, COUNT(s.STUDENT_NO) AS 학생수, RANK() OVER (ORDER BY 학생수 DESC) AS 순위
	FROM TB_DEPARTMENT d
		INNER JOIN TB_STUDENT s
		ON d.DEPARTMENT_NO = s.DEPARTMENT_NO 
	WHERE CATEGORY = '공학'
	GROUP BY s.DEPARTMENT_NO
) t
WHERE 순위 = 1
UNION
SELECT *
FROM (
	SELECT d.CATEGORY AS 계열, d.DEPARTMENT_NAME AS 학과이름, COUNT(s.STUDENT_NO) AS 학생수, RANK() OVER (ORDER BY 학생수 DESC) AS 순위
	FROM TB_DEPARTMENT d
		INNER JOIN TB_STUDENT s
		ON d.DEPARTMENT_NO = s.DEPARTMENT_NO 
	WHERE CATEGORY = '자연과학'
	GROUP BY s.DEPARTMENT_NO
) t
WHERE 순위 = 1;

-- 14
-- 문제에서 어떤 것을 원하는 건지 잘 모르겠다...

-- -- 5위까지를 구하라는 것이라면,
SELECT 학과이름, 학생이름, 입학일자, 순위
FROM (
	SELECT d.DEPARTMENT_NAME AS 학과이름, s.STUDENT_NAME AS 학생이름, s.ENTRANCE_DATE AS 입학일자, DENSE_RANK() OVER (ORDER BY s.ENTRANCE_DATE) AS 순위
	FROM TB_STUDENT s
		INNER JOIN TB_DEPARTMENT d
		ON s.DEPARTMENT_NO = d.DEPARTMENT_NO
	WHERE d.DEPARTMENT_NO = (
		SELECT DEPARTMENT_NO 
		FROM TB_DEPARTMENT
		WHERE DEPARTMENT_NAME = '생태시스템공학과'
	) AND DATEDIFF(now(), s.ENTRANCE_DATE) > 365*10
) t
WHERE 순위 <= 5;

-- -- 5명을 뽑으라는 것이라면,
SELECT d.DEPARTMENT_NAME AS 학과이름, s.STUDENT_NAME AS 학생이름, s.ENTRANCE_DATE AS 입학일자
FROM TB_STUDENT s
	INNER JOIN TB_DEPARTMENT d
	ON s.DEPARTMENT_NO = d.DEPARTMENT_NO
WHERE d.DEPARTMENT_NO = (
	SELECT DEPARTMENT_NO 
	FROM TB_DEPARTMENT
	WHERE DEPARTMENT_NAME = '생태시스템공학과'
) AND DATEDIFF(now(), s.ENTRANCE_DATE) > 365*10
LIMIT 5;

-- -- 모두 문제 답안과는 다르다.
-- -- 내가 이상한건가...?

-- 15
SELECT 과목이름, 학과이름
FROM (
	SELECT c.CLASS_NO, c.CLASS_NAME AS 과목이름, d.DEPARTMENT_NAME AS 학과이름
	FROM TB_CLASS c
		INNER JOIN TB_DEPARTMENT d
		ON c.DEPARTMENT_NO = d.DEPARTMENT_NO
	WHERE c.CLASS_NAME LIKE '%논문%'
		AND c.DEPARTMENT_NO IN (
			SELECT DEPARTMENT_NO
			FROM TB_DEPARTMENT
			WHERE CATEGORY = '예체능'
		)
) cd
LEFT JOIN TB_CLASS_PROFESSOR p
	ON cd.CLASS_NO = p.CLASS_NO
WHERE p.CLASS_NO IS NULL
ORDER BY 학과이름;

-- 16
SELECT d.CATEGORY AS 계열, d.DEPARTMENT_NAME AS 학과, COUNT(p.PROFESSOR_NO) AS 교수수
FROM TB_DEPARTMENT d
	LEFT JOIN TB_PROFESSOR p
	ON d.DEPARTMENT_NO = p.DEPARTMENT_NO
WHERE CATEGORY = (
	SELECT CATEGORY
	FROM TB_DEPARTMENT td
	WHERE DEPARTMENT_NAME = '환경조경학과'
)
GROUP BY d.DEPARTMENT_NO
ORDER BY 3 DESC;

-- 17
SELECT c1.CLASS_NAME AS 과목, c2. CLASS_NAME AS 선수과목
FROM TB_CLASS c1
	INNER JOIN TB_CLASS c2
	ON c1.PREATTENDING_CLASS_NO = c2.CLASS_NO
WHERE c1.DEPARTMENT_NO = (
	SELECT DEPARTMENT_NO
	FROM TB_DEPARTMENT td
	WHERE DEPARTMENT_NAME = '영어영문학과'
) AND c1.PREATTENDING_CLASS_NO IS NOT NULL

-- 18
SELECT d.DEPARTMENT_NAME AS 학과이름, p.PROFESSOR_NAME AS 교수이름, COUNT(s.STUDENT_NAME) AS 여학생
FROM (
		SELECT *
		FROM TB_STUDENT
		WHERE SUBSTR(STUDENT_SSN, 8, 1) = '2'
	) s
	INNER JOIN (
		SELECT *
		FROM TB_PROFESSOR
		WHERE DEPARTMENT_NO IN (
			SELECT DEPARTMENT_NO
			FROM TB_DEPARTMENT
			WHERE CATEGORY = '공학'
		)
	) p
	ON s.COACH_PROFESSOR_NO = p.PROFESSOR_NO
	INNER JOIN TB_DEPARTMENT d
	ON p.DEPARTMENT_NO = d.DEPARTMENT_NO
GROUP BY p.PROFESSOR_NO
ORDER BY 3 DESC, 2 asc;

-- 19
SELECT d.DEPARTMENT_NAME AS 학과이름, s.STUDENT_NAME AS 학생이름, p.PROFESSOR_NAME AS 지도교수, DATE_FORMAT(s.ENTRANCE_DATE, '%Y년') AS 입학년도
FROM TB_STUDENT s
	INNER JOIN TB_DEPARTMENT d
	ON s.DEPARTMENT_NO = d.DEPARTMENT_NO
	INNER JOIN TB_PROFESSOR p
	ON s.COACH_PROFESSOR_NO  = p.PROFESSOR_NO
WHERE ENTRANCE_DATE BETWEEN '2001-01-01' AND '2007-12-31'
	AND STUDENT_ADDRESS IS NULL
	AND SUBSTR(STUDENT_SSN, 8, 1) = '1'
ORDER BY 학생이름;

-- 20
-- -- 값 확인
SELECT CATEGORY AS 계열, DEPARTMENT_NAME AS 학과명, CAPACITY AS 현재정원, ROUND(CAPACITY * 0.7) AS 업데이트예정값
FROM TB_DEPARTMENT;

-- -- 트랙잭션 시작
START TRANSACTION;

UPDATE TB_DEPARTMENT
SET CAPACITY = ROUND(CAPACITY * 0.7);

SELECT CATEGORY, DEPARTMENT_NAME, CAPACITY
FROM TB_DEPARTMENT;

ROLLBACK;

-- 21
SELECT SUBSTR(TERM_NO, 1, 4) AS 년도, ROUND(AVG(POINT), 1) AS 평점 
FROM TB_GRADE
WHERE STUDENT_NO IN (
	SELECT STUDENT_NO
	FROM TB_STUDENT
	WHERE COACH_PROFESSOR_NO = (
		SELECT PROFESSOR_NO
		FROM TB_PROFESSOR 
		WHERE PROFESSOR_NO = (
			SELECT COACH_PROFESSOR_NO
			FROM TB_STUDENT
			WHERE STUDENT_NAME = '서가람'
		)
	)
)
GROUP BY 년도

-- 22
SELECT
	d.DEPARTMENT_NAME AS 학과명,
	s.STUDENT_NAME AS 학생명,
	DATE_FORMAT(s.ENTRANCE_DATE, '%y/%m/%d') AS 입학일자,
	YEAR(NOW()) - (CAST(SUBSTR(s.STUDENT_SSN, 1, 2) as UNSIGNED INTEGER) + 1900) AS 나이
FROM TB_STUDENT s
	INNER JOIN TB_DEPARTMENT d
	ON s.DEPARTMENT_NO = d.DEPARTMENT_NO
WHERE SUBSTR(STUDENT_SSN, 8, 1) = '1'
	AND ABSENCE_YN = 'Y'
	AND ENTRANCE_DATE BETWEEN '2001-01-01' AND NOW()
ORDER BY ENTRANCE_DATE DESC;

-- 23
SELECT p2.PROFESSOR_NAME AS '지도 교수', COUNT(s.STUDENT_NO) AS '학생 수'
FROM TB_STUDENT s
	INNER JOIN TB_PROFESSOR p2
	ON s.COACH_PROFESSOR_NO = p2.PROFESSOR_NO
WHERE COACH_PROFESSOR_NO IN (
	SELECT p.PROFESSOR_NO
	FROM TB_CLASS_PROFESSOR cp
		RIGHT JOIN TB_PROFESSOR p
		ON cp.PROFESSOR_NO = p.PROFESSOR_NO
	WHERE cp.PROFESSOR_NO IS NULL
)
GROUP BY COACH_PROFESSOR_NO
ORDER BY 1;

-- 24
SELECT s.STUDENT_NAME AS 학생이름, g.TERM_NO AS 학기, g.POINT AS 학점
FROM TB_STUDENT s
	INNER JOIN TB_GRADE g
	ON s.STUDENT_NO = g.STUDENT_NO
WHERE s.DEPARTMENT_NO IN (
		SELECT DEPARTMENT_NO
		FROM TB_DEPARTMENT
		WHERE CATEGORY = '공학'
	)
	AND CAST(SUBSTR(g.TERM_NO, 1, 4) AS INTEGER) >= 2009
	AND g.POINT >= 4.0
ORDER BY 학점 DESC, 학생이름 ASC;

-- 25
SELECT SUBSTR(TERM_NO, 1, 4) AS 년도, SUBSTR(TERM_NO, 5, 2) AS 학기, ROUND(AVG(POINT), 1) AS 평점
FROM TB_GRADE
WHERE STUDENT_NO IN (
		SELECT STUDENT_NO
		FROM TB_STUDENT
		WHERE DEPARTMENT_NO = (
			SELECT DEPARTMENT_NO
			FROM TB_STUDENT
			WHERE STUDENT_NAME = '김고운'
	)
)
GROUP BY TERM_NO
HAVING 년도 = 2007
UNION -- UNION
SELECT SUBSTR(TERM_NO, 1, 4) AS 년도, '-', ROUND(AVG(POINT), 1) AS 평점
FROM TB_GRADE
WHERE STUDENT_NO IN (
		SELECT STUDENT_NO
		FROM TB_STUDENT
		WHERE DEPARTMENT_NO = (
			SELECT DEPARTMENT_NO
			FROM TB_STUDENT
			WHERE STUDENT_NAME = '김고운'
	)
)
GROUP BY 년도
HAVING 년도 = 2007
UNION SELECT SUBSTR(TERM_NO, 1, 4) AS 년도, SUBSTR(TERM_NO, 5, 2) AS 학기, ROUND(AVG(POINT), 1) AS 평점
FROM TB_GRADE
WHERE STUDENT_NO IN (
		SELECT STUDENT_NO
		FROM TB_STUDENT
		WHERE DEPARTMENT_NO = (
			SELECT DEPARTMENT_NO
			FROM TB_STUDENT
			WHERE STUDENT_NAME = '김고운'
	)
)
GROUP BY TERM_NO
HAVING 년도 = 2008
UNION -- UNION
SELECT SUBSTR(TERM_NO, 1, 4) AS 년도, '-', ROUND(AVG(POINT), 1) AS 평점
FROM TB_GRADE
WHERE STUDENT_NO IN (
		SELECT STUDENT_NO
		FROM TB_STUDENT
		WHERE DEPARTMENT_NO = (
			SELECT DEPARTMENT_NO
			FROM TB_STUDENT
			WHERE STUDENT_NAME = '김고운'
	)
)
GROUP BY 년도
HAVING 년도 = 2008
UNION -- UNION
SELECT '-', SUBSTR(TERM_NO, 5, 2) AS 학기, ROUND(AVG(POINT), 1) AS 평점
FROM TB_GRADE
WHERE STUDENT_NO IN (
		SELECT STUDENT_NO
		FROM TB_STUDENT
		WHERE DEPARTMENT_NO = (
			SELECT DEPARTMENT_NO
			FROM TB_STUDENT
			WHERE STUDENT_NAME = '김고운'
	)
	AND CAST(SUBSTR(TERM_NO, 1, 4) AS INTEGER) BETWEEN 2007 AND 2008
)
GROUP BY 학기
UNION -- UNION
SELECT '-', '-', ROUND(AVG(POINT), 1) AS 평점
FROM TB_GRADE
WHERE STUDENT_NO IN (
		SELECT STUDENT_NO
		FROM TB_STUDENT
		WHERE DEPARTMENT_NO = (
			SELECT DEPARTMENT_NO
			FROM TB_STUDENT
			WHERE STUDENT_NAME = '김고운'
	)
	AND CAST(SUBSTR(TERM_NO, 1, 4) AS INTEGER) BETWEEN 2007 AND 2008
);

-- 26
SELECT SUBSTR(TERM_NO, 1, 4) AS 년도, SUBSTR(TERM_NO, 5, 2) AS 학기, AVG(POINT) AS 학점
FROM TB_GRADE
WHERE STUDENT_NO IN (
	SELECT STUDENT_NO
	FROM TB_STUDENT
	WHERE DEPARTMENT_NO = (
		SELECT DEPARTMENT_NO
		FROM TB_CLASS
		WHERE CLASS_NAME = '문학과생태학'
	)
)
GROUP BY TERM_NO
HAVING 년도 = '2004'
UNION -- UNION
SELECT SUBSTR(TERM_NO, 1, 4) AS 년도, '-', AVG(POINT) AS 학점
FROM TB_GRADE
WHERE STUDENT_NO IN (
	SELECT STUDENT_NO
	FROM TB_STUDENT
	WHERE DEPARTMENT_NO = (
		SELECT DEPARTMENT_NO
		FROM TB_CLASS
		WHERE CLASS_NAME = '문학과생태학'
	) AND SUBSTR(TERM_NO, 1, 4) = '2004'
);

-- 27
-- -- 답안과 다르게 조회되었다.
SELECT 과목이름, 누적수강생수
FROM (
	SELECT c.CLASS_NAME AS 과목이름, COUNT(g.STUDENT_NO) AS 누적수강생수, RANK() OVER (ORDER BY 누적수강생수 DESC) AS 순위
	FROM TB_GRADE g
		INNER JOIN TB_CLASS c 
		ON g.CLASS_NO = c.CLASS_NO 
	WHERE CAST(SUBSTR(g.TERM_NO, 1, 4) AS INTEGER) BETWEEN 2004 AND 2009 
	GROUP BY c.CLASS_NO
	ORDER BY 2 DESC
) t
WHERE 순위 <= 3;

-- 28
SELECT s.STUDENT_NAME AS 학생이름, p.PROFESSOR_NAME AS 지도교수
FROM TB_STUDENT s
	INNER JOIN TB_PROFESSOR p
	ON s.COACH_PROFESSOR_NO = p.PROFESSOR_NO
WHERE CHAR_LENGTH(STUDENT_NO) = 7
	AND STUDENT_NO LIKE 'A%'
	AND SUBSTR(STUDENT_NO, 4, 1) ='3' 
	AND COACH_PROFESSOR_NO IN (
		SELECT PROFESSOR_NO 
		FROM TB_PROFESSOR
		WHERE PROFESSOR_NAME LIKE '이%'
	)
ORDER BY 학생이름;

-- 29
SELECT d.CATEGORY AS 계열, d.DEPARTMENT_NAME AS 학과이름, COUNT(s.STUDENT_NO) AS 학생수
FROM TB_DEPARTMENT d
	INNER JOIN TB_STUDENT s 
	ON d.DEPARTMENT_NO = s.DEPARTMENT_NO  
WHERE CATEGORY = '예체능' OR CATEGORY = '의학'
GROUP BY d.DEPARTMENT_NO
ORDER BY d.CATEGORY ASC, 학생수 DESC;

-- 30
SELECT c1.CLASS_NAME AS 과목, c2.CLASS_NAME AS 선수과목
FROM TB_CLASS c1
	INNER JOIN TB_CLASS c2
	ON c1.PREATTENDING_CLASS_NO = c2.CLASS_NO
WHERE c1.DEPARTMENT_NO = (
	SELECT DEPARTMENT_NO
	FROM TB_DEPARTMENT
	WHERE DEPARTMENT_NAME = '행정학과'
);

-- 31
-- -- 답안과 결과가 다르다
SELECT CLASS_NO AS 과목번호, CLASS_NAME AS 과목이름
FROM TB_CLASS
WHERE CLASS_NO IN (
	SELECT CLASS_NO FROM (
		SELECT CLASS_NO, COUNT(STUDENT_NO) AS INX
		FROM TB_GRADE
		WHERE CAST(SUBSTR(TERM_NO, 1, 4) AS INTEGER) >= 2009-10
		GROUP BY CLASS_NO
		ORDER BY INX DESC
		LIMIT 5
	) t
);